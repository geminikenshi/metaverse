/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useLoader } from "@react-three/fiber";
import { useEffect, useState } from "react";

import { GLTFLoader } from "three/examples/jsm/Addons.js";

type bambooType = {
  position: { x: number; z: number };
  box: number;
};

type props = {
  boundary: number;
  count: number;
};

const Bamboos: React.FC<props> = ({ boundary, count }) => {
  const model = useLoader(GLTFLoader, "./models/bamboo.glb");
  const [bamboos, setBamboos] = useState<bambooType[]>([]);

  model.scene.traverse((obj) => {
    if (obj.isMesh) {
      obj.castShadow = true;
    }
  });

  const updatePosition = (bambooArray: bambooType[], boundary: number) => {
    bambooArray.forEach((bamboo, index) => {
      bamboo.position.x = Math.random() * 100;
      bamboo.position.z = Math.random() * 100;
    });
    setBamboos(bambooArray);
  };

  useEffect(() => {
    const tempBamboos: bambooType[] = [];
    for (let i = 0; i < count; i++) {
      tempBamboos.push({ position: { x: 0, z: 0 }, box: 1 });
    }
    updatePosition(tempBamboos, boundary);
  }, [boundary, count]);

  return (
    <group rotation={[0.01, 0, 0]}>
      {bamboos.map((bamboo, index) => {
        return (
          <object3D
            key={index}
            position={[bamboo.position.x, 0, bamboo.position.z]}
          >
            <primitive object={model.scene.clone()} />
          </object3D>
        );
      })}
    </group>
  );
};

export default Bamboos;
// type GLTFResult = GLTF & {
//   nodes: {
//     Bark01_5: THREE.Mesh;
//     Branch01_5: THREE.Mesh;
//     Leaf01_5: THREE.Mesh;
//     Leaf02_5: THREE.Mesh;
//   };
//   materials: {
//     Bark01_SHD: THREE.MeshPhysicalMaterial;
//     Branch01_SHD: THREE.MeshPhysicalMaterial;
//     Leaf01_su_SHD: THREE.MeshPhysicalMaterial;
//     Leaf02_su_SHD: THREE.MeshPhysicalMaterial;
//   };
// };

// export function BambooModel(props: JSX.IntrinsicElements["group"]) {
//   const { nodes, materials } = useGLTF("/models/bamboo.glb") as GLTFResult;
//   const [color, setColor] = useState("green");

//   return (
//     <group {...props} dispose={null}>
//       <group position={[-0.003, 0.051, 0.257]} scale={0.01}>
//         <mesh
//           castShadow
//           receiveShadow
//           geometry={nodes.Bark01_5.geometry}
//           material={materials.Bark01_SHD}
//         />
//         <mesh
//           castShadow
//           receiveShadow
//           geometry={nodes.Branch01_5.geometry}
//           material={materials.Branch01_SHD}
//           //
//           material-color={color}
//           onClick={() => (color != "red" ? setColor("red") : setColor("white"))}
//         />
//         <mesh
//           castShadow
//           receiveShadow
//           geometry={nodes.Leaf01_5.geometry}
//           material={materials.Leaf01_su_SHD}
//           //
//           material-color={color}
//           onClick={() => (color != "red" ? setColor("red") : setColor("white"))}
//         />
//         <mesh
//           castShadow
//           receiveShadow
//           geometry={nodes.Leaf02_5.geometry}
//           material={materials.Leaf02_su_SHD}
//           //
//           material-color={color}
//           onClick={() => (color != "red" ? setColor("red") : setColor("white"))}
//         />
//       </group>
//     </group>
//   );
// }

// useGLTF.preload("/models/bamboo.glb");
